{"ast":null,"code":"import { CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, CREATE_ORDER_FAIL, MY_ORDERS_REQUEST, MY_ORDERS_SUCCESS, MY_ORDERS_FAIL, ALL_ORDERS_REQUEST, ALL_ORDERS_SUCCESS, ALL_ORDERS_FAIL, UPDATE_ORDER_REQUEST, UPDATE_ORDER_SUCCESS, UPDATE_ORDER_FAIL, DELETE_ORDER_REQUEST, DELETE_ORDER_SUCCESS, DELETE_ORDER_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, CLEAR_ERRORS } from \"../constants/orderConstants\";\nimport axios from \"axios\";\n\n// Create Order\nexport const createOrder = (order, token) => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `${token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"http://localhost:4000/api/order/new\", order, config);\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Clearing Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};\n\n// My Orders\nexport const myOrders = token => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `${token}`\n      }\n    };\n    dispatch({\n      type: MY_ORDERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"http://localhost:4000/api/orders/me\", config);\n    dispatch({\n      type: MY_ORDERS_SUCCESS,\n      payload: data.orders\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const getOrderDetails = (id, token) => async dispatch => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const config = {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `${token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`http://localhost:4000/api/order/${id}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_FAIL","MY_ORDERS_REQUEST","MY_ORDERS_SUCCESS","MY_ORDERS_FAIL","ALL_ORDERS_REQUEST","ALL_ORDERS_SUCCESS","ALL_ORDERS_FAIL","UPDATE_ORDER_REQUEST","UPDATE_ORDER_SUCCESS","UPDATE_ORDER_FAIL","DELETE_ORDER_REQUEST","DELETE_ORDER_SUCCESS","DELETE_ORDER_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","CLEAR_ERRORS","axios","createOrder","order","token","dispatch","type","config","headers","Accept","Authorization","data","post","payload","error","response","message","clearErrors","myOrders","get","orders","getOrderDetails","id"],"sources":["C:/Users/prati/OneDrive/Desktop/Javascript/internship/ECOM_APP/frontend/src/actions/orderAction.js"],"sourcesContent":["import {\r\n    CREATE_ORDER_REQUEST,\r\n    CREATE_ORDER_SUCCESS,\r\n    CREATE_ORDER_FAIL,\r\n    MY_ORDERS_REQUEST,\r\n    MY_ORDERS_SUCCESS,\r\n    MY_ORDERS_FAIL,\r\n    ALL_ORDERS_REQUEST,\r\n    ALL_ORDERS_SUCCESS,\r\n    ALL_ORDERS_FAIL,\r\n    UPDATE_ORDER_REQUEST,\r\n    UPDATE_ORDER_SUCCESS,\r\n    UPDATE_ORDER_FAIL,\r\n    DELETE_ORDER_REQUEST,\r\n    DELETE_ORDER_SUCCESS,\r\n    DELETE_ORDER_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    CLEAR_ERRORS,\r\n  } from \"../constants/orderConstants\";\r\n  \r\n  import axios from \"axios\";\r\n  \r\n  // Create Order\r\n  export const createOrder = (order,token) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: CREATE_ORDER_REQUEST });\r\n  \r\n      const config = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `${token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\"http://localhost:4000/api/order/new\", order, config);\r\n  \r\n      dispatch({ type: CREATE_ORDER_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: CREATE_ORDER_FAIL,\r\n        payload: error.response.data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Clearing Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};\r\n\r\n\r\n// My Orders\r\nexport const myOrders = (token) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${token}`,\r\n      },\r\n    }\r\n    dispatch({ type: MY_ORDERS_REQUEST });\r\n\r\n    const { data } = await axios.get(\"http://localhost:4000/api/orders/me\",config);\r\n\r\n    dispatch({ type: MY_ORDERS_SUCCESS, payload: data.orders});\r\n  } catch (error) {\r\n    dispatch({\r\n      type: MY_ORDERS_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrderDetails = (id,token) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST });\r\n    const config = {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${token}`,\r\n      },\r\n    }\r\n    const { data } = await axios.get(`http://localhost:4000/api/order/${id}`,config);\r\n\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data.order });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DETAILS_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}